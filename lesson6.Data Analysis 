{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN0mgrq4uk9yXScCgD4/qYC",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ramezanis/notebook/blob/main/lesson6.Data%20Analysis%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 83,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "puAbpEFJrcCB",
        "outputId": "6f0e1df5-6c70-4939-96fe-4130347069c3"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['.config', 'my_dataframe2.csv', 'sample_data']"
            ]
          },
          "metadata": {},
          "execution_count": 83
        }
      ],
      "source": [
        " import os\n",
        "os.listdir('/content')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files"
      ],
      "metadata": {
        "id": "EF_DvN_3Cya0"
      },
      "execution_count": 84,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "uploaded = files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "32mj94-ADF3Y",
        "outputId": "d276ce9a-b502-497a-90e2-58f61f5d0a2b"
      },
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-3f2b1f7c-2729-47ca-a08a-7f21304a03f6\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-3f2b1f7c-2729-47ca-a08a-7f21304a03f6\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving my_dataframe2.csv to my_dataframe2 (1).csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd"
      ],
      "metadata": {
        "id": "zWOBjWxGDOu1"
      },
      "execution_count": 87,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('my_dataframe2.csv')"
      ],
      "metadata": {
        "id": "KwL1vozp3Wk1"
      },
      "execution_count": 88,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 982
        },
        "id": "lRzhSwMl3mYO",
        "outputId": "014ee2ee-b922-44de-ce03-1ff99987fa6e"
      },
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Unnamed: 0.1  Unnamed: 0  \\\n",
              "0                0           0   \n",
              "1                1           1   \n",
              "2                3           3   \n",
              "3                4           4   \n",
              "4                5           5   \n",
              "...            ...         ...   \n",
              "4886          5495        5881   \n",
              "4887          5496        5882   \n",
              "4888          5497        5883   \n",
              "4889          5498        5886   \n",
              "4890          5499        5887   \n",
              "\n",
              "                                              Job Title  \\\n",
              "0                                 Senior Data Scientist   \n",
              "1                     Data Scientist, Product Analytics   \n",
              "2                                          Data Analyst   \n",
              "3                                Director, Data Science   \n",
              "4                                        Data Scientist   \n",
              "...                                                 ...   \n",
              "4886                              Information Scientist   \n",
              "4887              Supervisory Research Health Scientist   \n",
              "4888                  Senior SAS Programmer (Scientist)   \n",
              "4889  Senior Data Analyst - Product Analytics (open ...   \n",
              "4890                Manufacturing Data Analyst Engineer   \n",
              "\n",
              "                                 Salary Estimate  Rating  \\\n",
              "0     ['111', '-', '181', '(Glassdoor', 'est.)']     3.5   \n",
              "1     ['111', '-', '181', '(Glassdoor', 'est.)']     4.5   \n",
              "2     ['111', '-', '181', '(Glassdoor', 'est.)']     3.4   \n",
              "3     ['111', '-', '181', '(Glassdoor', 'est.)']     3.4   \n",
              "4     ['111', '-', '181', '(Glassdoor', 'est.)']     2.9   \n",
              "...                                          ...     ...   \n",
              "4886    ['38', '-', '64', '(Glassdoor', 'est.)']     3.2   \n",
              "4887    ['47', '-', '89', '(Glassdoor', 'est.)']     4.2   \n",
              "4888   ['66', '-', '113', '(Glassdoor', 'est.)']     4.0   \n",
              "4889   ['67', '-', '111', '(Glassdoor', 'est.)']     4.0   \n",
              "4890    ['42', '-', '76', '(Glassdoor', 'est.)']     3.6   \n",
              "\n",
              "                                         Company Name        Location  \\\n",
              "0                                         Hopper\\n3.5    New York, NY   \n",
              "1                                        Noom US\\n4.5    New York, NY   \n",
              "2                               Sapphire Digital\\n3.4   Lyndhurst, NJ   \n",
              "3                     United Entertainment Group\\n3.4    New York, NY   \n",
              "4                                  IFG Companies\\n2.9    New York, NY   \n",
              "...                                               ...             ...   \n",
              "4886                                         CAS\\n3.2    Columbus, OH   \n",
              "4887  Centers for Disease Control and Prevention\\n4.2  Cincinnati, OH   \n",
              "4888                                     Certara\\n4.0  Cincinnati, OH   \n",
              "4889                                   New Relic\\n4.0  Cincinnati, OH   \n",
              "4890                                 Hose Master\\n3.6      Euclid, OH   \n",
              "\n",
              "                        Size  Founded               Type of ownership  \\\n",
              "0      501 to 1000 employees     2007               Company - Private   \n",
              "1     1001 to 5000 employees     2008               Company - Private   \n",
              "2       201 to 500 employees     2019               Company - Private   \n",
              "3        51 to 200 employees     2007               Company - Private   \n",
              "4       201 to 500 employees     1985               Company - Private   \n",
              "...                      ...      ...                             ...   \n",
              "4886  1001 to 5000 Employees     1907  Subsidiary or Business Segment   \n",
              "4887        10000+ Employees     1946                      Government   \n",
              "4888   501 to 1000 Employees     2008                Company - Public   \n",
              "4889  1001 to 5000 Employees     2008                Company - Public   \n",
              "4890    201 to 500 Employees     1982               Company - Private   \n",
              "\n",
              "                                     Industry                     Sector  \\\n",
              "0                             Travel Agencies           Travel & Tourism   \n",
              "1                   Health, Beauty, & Fitness          Consumer Services   \n",
              "2                                    Internet     Information Technology   \n",
              "3                     Advertising & Marketing          Business Services   \n",
              "4                          Insurance Carriers                  Insurance   \n",
              "...                                       ...                        ...   \n",
              "4886  Enterprise Software & Network Solutions     Information Technology   \n",
              "4887                         Federal Agencies                 Government   \n",
              "4888                Biotech & Pharmaceuticals  Biotech & Pharmaceuticals   \n",
              "4889             Computer Hardware & Software     Information Technology   \n",
              "4890    Electrical & Electronic Manufacturing              Manufacturing   \n",
              "\n",
              "                         Revenue  Min_salary  Max_salary  Average_salary State  \n",
              "0       Unknown / Non-Applicable         111         181           146.0    NY  \n",
              "1       Unknown / Non-Applicable         111         181           146.0    NY  \n",
              "2       Unknown / Non-Applicable         111         181           146.0    NJ  \n",
              "3       Unknown / Non-Applicable         111         181           146.0    NY  \n",
              "4       Unknown / Non-Applicable         111         181           146.0    NY  \n",
              "...                          ...         ...         ...             ...   ...  \n",
              "4886  $100 to $500 million (USD)          38          64            51.0    OH  \n",
              "4887    Unknown / Non-Applicable          47          89            68.0    OH  \n",
              "4888    Unknown / Non-Applicable          66         113            89.5    OH  \n",
              "4889  $100 to $500 million (USD)          67         111            89.0    OH  \n",
              "4890    Unknown / Non-Applicable          42          76            59.0    OH  \n",
              "\n",
              "[4891 rows x 17 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bbe81652-0397-4641-a0c5-95954d88e927\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0.1</th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Job Title</th>\n",
              "      <th>Salary Estimate</th>\n",
              "      <th>Rating</th>\n",
              "      <th>Company Name</th>\n",
              "      <th>Location</th>\n",
              "      <th>Size</th>\n",
              "      <th>Founded</th>\n",
              "      <th>Type of ownership</th>\n",
              "      <th>Industry</th>\n",
              "      <th>Sector</th>\n",
              "      <th>Revenue</th>\n",
              "      <th>Min_salary</th>\n",
              "      <th>Max_salary</th>\n",
              "      <th>Average_salary</th>\n",
              "      <th>State</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Senior Data Scientist</td>\n",
              "      <td>['111', '-', '181', '(Glassdoor', 'est.)']</td>\n",
              "      <td>3.5</td>\n",
              "      <td>Hopper\\n3.5</td>\n",
              "      <td>New York, NY</td>\n",
              "      <td>501 to 1000 employees</td>\n",
              "      <td>2007</td>\n",
              "      <td>Company - Private</td>\n",
              "      <td>Travel Agencies</td>\n",
              "      <td>Travel &amp; Tourism</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>111</td>\n",
              "      <td>181</td>\n",
              "      <td>146.0</td>\n",
              "      <td>NY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Data Scientist, Product Analytics</td>\n",
              "      <td>['111', '-', '181', '(Glassdoor', 'est.)']</td>\n",
              "      <td>4.5</td>\n",
              "      <td>Noom US\\n4.5</td>\n",
              "      <td>New York, NY</td>\n",
              "      <td>1001 to 5000 employees</td>\n",
              "      <td>2008</td>\n",
              "      <td>Company - Private</td>\n",
              "      <td>Health, Beauty, &amp; Fitness</td>\n",
              "      <td>Consumer Services</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>111</td>\n",
              "      <td>181</td>\n",
              "      <td>146.0</td>\n",
              "      <td>NY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>Data Analyst</td>\n",
              "      <td>['111', '-', '181', '(Glassdoor', 'est.)']</td>\n",
              "      <td>3.4</td>\n",
              "      <td>Sapphire Digital\\n3.4</td>\n",
              "      <td>Lyndhurst, NJ</td>\n",
              "      <td>201 to 500 employees</td>\n",
              "      <td>2019</td>\n",
              "      <td>Company - Private</td>\n",
              "      <td>Internet</td>\n",
              "      <td>Information Technology</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>111</td>\n",
              "      <td>181</td>\n",
              "      <td>146.0</td>\n",
              "      <td>NJ</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>Director, Data Science</td>\n",
              "      <td>['111', '-', '181', '(Glassdoor', 'est.)']</td>\n",
              "      <td>3.4</td>\n",
              "      <td>United Entertainment Group\\n3.4</td>\n",
              "      <td>New York, NY</td>\n",
              "      <td>51 to 200 employees</td>\n",
              "      <td>2007</td>\n",
              "      <td>Company - Private</td>\n",
              "      <td>Advertising &amp; Marketing</td>\n",
              "      <td>Business Services</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>111</td>\n",
              "      <td>181</td>\n",
              "      <td>146.0</td>\n",
              "      <td>NY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>Data Scientist</td>\n",
              "      <td>['111', '-', '181', '(Glassdoor', 'est.)']</td>\n",
              "      <td>2.9</td>\n",
              "      <td>IFG Companies\\n2.9</td>\n",
              "      <td>New York, NY</td>\n",
              "      <td>201 to 500 employees</td>\n",
              "      <td>1985</td>\n",
              "      <td>Company - Private</td>\n",
              "      <td>Insurance Carriers</td>\n",
              "      <td>Insurance</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>111</td>\n",
              "      <td>181</td>\n",
              "      <td>146.0</td>\n",
              "      <td>NY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4886</th>\n",
              "      <td>5495</td>\n",
              "      <td>5881</td>\n",
              "      <td>Information Scientist</td>\n",
              "      <td>['38', '-', '64', '(Glassdoor', 'est.)']</td>\n",
              "      <td>3.2</td>\n",
              "      <td>CAS\\n3.2</td>\n",
              "      <td>Columbus, OH</td>\n",
              "      <td>1001 to 5000 Employees</td>\n",
              "      <td>1907</td>\n",
              "      <td>Subsidiary or Business Segment</td>\n",
              "      <td>Enterprise Software &amp; Network Solutions</td>\n",
              "      <td>Information Technology</td>\n",
              "      <td>$100 to $500 million (USD)</td>\n",
              "      <td>38</td>\n",
              "      <td>64</td>\n",
              "      <td>51.0</td>\n",
              "      <td>OH</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4887</th>\n",
              "      <td>5496</td>\n",
              "      <td>5882</td>\n",
              "      <td>Supervisory Research Health Scientist</td>\n",
              "      <td>['47', '-', '89', '(Glassdoor', 'est.)']</td>\n",
              "      <td>4.2</td>\n",
              "      <td>Centers for Disease Control and Prevention\\n4.2</td>\n",
              "      <td>Cincinnati, OH</td>\n",
              "      <td>10000+ Employees</td>\n",
              "      <td>1946</td>\n",
              "      <td>Government</td>\n",
              "      <td>Federal Agencies</td>\n",
              "      <td>Government</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>47</td>\n",
              "      <td>89</td>\n",
              "      <td>68.0</td>\n",
              "      <td>OH</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4888</th>\n",
              "      <td>5497</td>\n",
              "      <td>5883</td>\n",
              "      <td>Senior SAS Programmer (Scientist)</td>\n",
              "      <td>['66', '-', '113', '(Glassdoor', 'est.)']</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Certara\\n4.0</td>\n",
              "      <td>Cincinnati, OH</td>\n",
              "      <td>501 to 1000 Employees</td>\n",
              "      <td>2008</td>\n",
              "      <td>Company - Public</td>\n",
              "      <td>Biotech &amp; Pharmaceuticals</td>\n",
              "      <td>Biotech &amp; Pharmaceuticals</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>66</td>\n",
              "      <td>113</td>\n",
              "      <td>89.5</td>\n",
              "      <td>OH</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4889</th>\n",
              "      <td>5498</td>\n",
              "      <td>5886</td>\n",
              "      <td>Senior Data Analyst - Product Analytics (open ...</td>\n",
              "      <td>['67', '-', '111', '(Glassdoor', 'est.)']</td>\n",
              "      <td>4.0</td>\n",
              "      <td>New Relic\\n4.0</td>\n",
              "      <td>Cincinnati, OH</td>\n",
              "      <td>1001 to 5000 Employees</td>\n",
              "      <td>2008</td>\n",
              "      <td>Company - Public</td>\n",
              "      <td>Computer Hardware &amp; Software</td>\n",
              "      <td>Information Technology</td>\n",
              "      <td>$100 to $500 million (USD)</td>\n",
              "      <td>67</td>\n",
              "      <td>111</td>\n",
              "      <td>89.0</td>\n",
              "      <td>OH</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4890</th>\n",
              "      <td>5499</td>\n",
              "      <td>5887</td>\n",
              "      <td>Manufacturing Data Analyst Engineer</td>\n",
              "      <td>['42', '-', '76', '(Glassdoor', 'est.)']</td>\n",
              "      <td>3.6</td>\n",
              "      <td>Hose Master\\n3.6</td>\n",
              "      <td>Euclid, OH</td>\n",
              "      <td>201 to 500 Employees</td>\n",
              "      <td>1982</td>\n",
              "      <td>Company - Private</td>\n",
              "      <td>Electrical &amp; Electronic Manufacturing</td>\n",
              "      <td>Manufacturing</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>42</td>\n",
              "      <td>76</td>\n",
              "      <td>59.0</td>\n",
              "      <td>OH</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4891 rows × 17 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bbe81652-0397-4641-a0c5-95954d88e927')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bbe81652-0397-4641-a0c5-95954d88e927 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bbe81652-0397-4641-a0c5-95954d88e927');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f3dcb46f-235f-4f84-9b0b-9b998480c6af\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f3dcb46f-235f-4f84-9b0b-9b998480c6af')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f3dcb46f-235f-4f84-9b0b-9b998480c6af button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_180a1a90-fd60-4138-afcb-494708aede7f\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_180a1a90-fd60-4138-afcb-494708aede7f button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 4891,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0.1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1585,\n        \"min\": 0,\n        \"max\": 5499,\n        \"num_unique_values\": 4891,\n        \"samples\": [\n          166,\n          90,\n          2365\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1665,\n        \"min\": 0,\n        \"max\": 5887,\n        \"num_unique_values\": 4891,\n        \"samples\": [\n          166,\n          90,\n          2386\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Job Title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2552,\n        \"samples\": [\n          \"Data Scientist, Analytics & Insights\",\n          \"MS Data Scientist\",\n          \"Managing Data Scientist/ML Engineer\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Salary Estimate\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1156,\n        \"samples\": [\n          \"['81', '-', '152', '(Glassdoor', 'est.)']\",\n          \"['83', '-', '145', '(Glassdoor', 'est.)']\",\n          \"['200', '-', '250', '(Employer', 'est.)']\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5770038788090343,\n        \"min\": 1.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 37,\n        \"samples\": [\n          4.6,\n          4.1,\n          4.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Company Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2577,\n        \"samples\": [\n          \"Park Computer Systems INC\\n3.9\",\n          \"Forfeiture Support Associates\\n2.8\",\n          \"ON Semiconductor\\n3.6\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Location\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 464,\n        \"samples\": [\n          \"Fort Lee, NJ\",\n          \"Whittier, CA\",\n          \"Seal Beach, CA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Size\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 16,\n        \"samples\": [\n          \"501 to 1000 employees\",\n          \"1001 to 5000 employees\",\n          \"10000+ employees\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Founded\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 658,\n        \"min\": -1,\n        \"max\": 2020,\n        \"num_unique_values\": 203,\n        \"samples\": [\n          1923,\n          1999,\n          1845\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Type of ownership\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"Private Practice / Firm\",\n          \"School / School District\",\n          \"Company - Private\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Industry\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 115,\n        \"samples\": [\n          \"Truck Rental & Leasing\",\n          \"Insurance Carriers\",\n          \"Biotech & Pharmaceuticals\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sector\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 27,\n        \"samples\": [\n          \"Restaurants, Bars & Food Services\",\n          \"Government\",\n          \"Agriculture & Forestry\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Revenue\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"$1 to $2 billion (USD)\",\n          \"$10 to $25 million (USD)\",\n          \"Unknown / Non-Applicable\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Min_salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31,\n        \"min\": 12,\n        \"max\": 200,\n        \"num_unique_values\": 125,\n        \"samples\": [\n          75,\n          94,\n          36\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Max_salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 42,\n        \"min\": 44,\n        \"max\": 386,\n        \"num_unique_values\": 171,\n        \"samples\": [\n          107,\n          89,\n          92\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Average_salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35.749097143930186,\n        \"min\": 37.5,\n        \"max\": 268.0,\n        \"num_unique_values\": 256,\n        \"samples\": [\n          43.0,\n          205.0,\n          65.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"State\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 23,\n        \"samples\": [\n          \"ME\",\n          \"OH\",\n          \"NY\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 89
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fUyxvJ3Q3yOD",
        "outputId": "271169dd-5218-4bd9-bfa3-ca8ac8f9b8eb"
      },
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 4891 entries, 0 to 4890\n",
            "Data columns (total 17 columns):\n",
            " #   Column             Non-Null Count  Dtype  \n",
            "---  ------             --------------  -----  \n",
            " 0   Unnamed: 0.1       4891 non-null   int64  \n",
            " 1   Unnamed: 0         4891 non-null   int64  \n",
            " 2   Job Title          4891 non-null   object \n",
            " 3   Salary Estimate    4891 non-null   object \n",
            " 4   Rating             4891 non-null   float64\n",
            " 5   Company Name       4891 non-null   object \n",
            " 6   Location           4891 non-null   object \n",
            " 7   Size               4891 non-null   object \n",
            " 8   Founded            4891 non-null   int64  \n",
            " 9   Type of ownership  4891 non-null   object \n",
            " 10  Industry           4891 non-null   object \n",
            " 11  Sector             4891 non-null   object \n",
            " 12  Revenue            4891 non-null   object \n",
            " 13  Min_salary         4891 non-null   int64  \n",
            " 14  Max_salary         4891 non-null   int64  \n",
            " 15  Average_salary     4891 non-null   float64\n",
            " 16  State              4891 non-null   object \n",
            "dtypes: float64(2), int64(5), object(10)\n",
            "memory usage: 649.7+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Job Title'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2_6eV3iw4bo6",
        "outputId": "942fe329-5859-414f-b051-b8d1539fb0bb"
      },
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Job Title\n",
              "Data Scientist                                                   530\n",
              "Data Analyst                                                     296\n",
              "Data Engineer                                                    267\n",
              "Senior Data Scientist                                            117\n",
              "Machine Learning Engineer                                         55\n",
              "                                                                ... \n",
              "Data Scientist - Top Secret w/ SCI Eligibility                     1\n",
              "Business Intelligence Analyst I                                    1\n",
              "Business Intelligence Analyst Senior (Chief Financial Office)      1\n",
              "Business Intelligence Analyst III - Credit Card                    1\n",
              "Manufacturing Data Analyst Engineer                                1\n",
              "Name: count, Length: 2552, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'Analyst' in 'Business Intelligence Analyst Senior(Chief Financial Office)'\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0V7SiBGX7Nvz",
        "outputId": "b1639e98-0314-4892-ec64-ba9023ff6905"
      },
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 92
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def title_orgenizer(x):\n",
        "  x = x.lower()\n",
        "  if('data scientist'in x) or('data science'in x):\n",
        "    return'data scientist'\n",
        "  elif 'data engineer' in x:\n",
        "     return 'data engineer'\n",
        "  elif 'deep learning' in x:\n",
        "     return 'deep learning engineer'\n",
        "  elif 'machine learning' in x:\n",
        "      return 'machine learning engineer'\n",
        "  elif 'director' in x:\n",
        "      return 'director'\n",
        "  elif 'manager' in x:\n",
        "     return 'manager'\n",
        "  elif 'analyst' in x:\n",
        "     return 'analyst'\n",
        "  elif 'reasercher' in x:\n",
        "     return 'reasercher'\n",
        "  else:\n",
        "    return 'other'"
      ],
      "metadata": {
        "id": "c4eLrIyFGzdf"
      },
      "execution_count": 93,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "title_orgenizer('Business Intelligence Analyst Senior (Chief Financial Office)')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "YlYv7HhdG3ve",
        "outputId": "748fcb0d-1578-4412-859e-72b6eb5971f0"
      },
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'analyst'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Job Title'].apply(title_orgenizer)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NmfVWYf6HCIT",
        "outputId": "a3d45d6c-2c57-45b1-8061-98bc14b1f799"
      },
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       data scientist\n",
              "1       data scientist\n",
              "2              analyst\n",
              "3       data scientist\n",
              "4       data scientist\n",
              "             ...      \n",
              "4886             other\n",
              "4887             other\n",
              "4888             other\n",
              "4889           analyst\n",
              "4890           analyst\n",
              "Name: Job Title, Length: 4891, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 95
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Job Title']= df['Job Title'].apply(title_orgenizer)"
      ],
      "metadata": {
        "id": "ZSv3r1CRHMAl"
      },
      "execution_count": 96,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 964
        },
        "id": "-XIaNsc4HcJ5",
        "outputId": "2a817a15-7c4b-4924-ad6b-5bb519a617fc"
      },
      "execution_count": 97,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Unnamed: 0.1  Unnamed: 0       Job Title  \\\n",
              "0                0           0  data scientist   \n",
              "1                1           1  data scientist   \n",
              "2                3           3         analyst   \n",
              "3                4           4  data scientist   \n",
              "4                5           5  data scientist   \n",
              "...            ...         ...             ...   \n",
              "4886          5495        5881           other   \n",
              "4887          5496        5882           other   \n",
              "4888          5497        5883           other   \n",
              "4889          5498        5886         analyst   \n",
              "4890          5499        5887         analyst   \n",
              "\n",
              "                                 Salary Estimate  Rating  \\\n",
              "0     ['111', '-', '181', '(Glassdoor', 'est.)']     3.5   \n",
              "1     ['111', '-', '181', '(Glassdoor', 'est.)']     4.5   \n",
              "2     ['111', '-', '181', '(Glassdoor', 'est.)']     3.4   \n",
              "3     ['111', '-', '181', '(Glassdoor', 'est.)']     3.4   \n",
              "4     ['111', '-', '181', '(Glassdoor', 'est.)']     2.9   \n",
              "...                                          ...     ...   \n",
              "4886    ['38', '-', '64', '(Glassdoor', 'est.)']     3.2   \n",
              "4887    ['47', '-', '89', '(Glassdoor', 'est.)']     4.2   \n",
              "4888   ['66', '-', '113', '(Glassdoor', 'est.)']     4.0   \n",
              "4889   ['67', '-', '111', '(Glassdoor', 'est.)']     4.0   \n",
              "4890    ['42', '-', '76', '(Glassdoor', 'est.)']     3.6   \n",
              "\n",
              "                                         Company Name        Location  \\\n",
              "0                                         Hopper\\n3.5    New York, NY   \n",
              "1                                        Noom US\\n4.5    New York, NY   \n",
              "2                               Sapphire Digital\\n3.4   Lyndhurst, NJ   \n",
              "3                     United Entertainment Group\\n3.4    New York, NY   \n",
              "4                                  IFG Companies\\n2.9    New York, NY   \n",
              "...                                               ...             ...   \n",
              "4886                                         CAS\\n3.2    Columbus, OH   \n",
              "4887  Centers for Disease Control and Prevention\\n4.2  Cincinnati, OH   \n",
              "4888                                     Certara\\n4.0  Cincinnati, OH   \n",
              "4889                                   New Relic\\n4.0  Cincinnati, OH   \n",
              "4890                                 Hose Master\\n3.6      Euclid, OH   \n",
              "\n",
              "                        Size  Founded               Type of ownership  \\\n",
              "0      501 to 1000 employees     2007               Company - Private   \n",
              "1     1001 to 5000 employees     2008               Company - Private   \n",
              "2       201 to 500 employees     2019               Company - Private   \n",
              "3        51 to 200 employees     2007               Company - Private   \n",
              "4       201 to 500 employees     1985               Company - Private   \n",
              "...                      ...      ...                             ...   \n",
              "4886  1001 to 5000 Employees     1907  Subsidiary or Business Segment   \n",
              "4887        10000+ Employees     1946                      Government   \n",
              "4888   501 to 1000 Employees     2008                Company - Public   \n",
              "4889  1001 to 5000 Employees     2008                Company - Public   \n",
              "4890    201 to 500 Employees     1982               Company - Private   \n",
              "\n",
              "                                     Industry                     Sector  \\\n",
              "0                             Travel Agencies           Travel & Tourism   \n",
              "1                   Health, Beauty, & Fitness          Consumer Services   \n",
              "2                                    Internet     Information Technology   \n",
              "3                     Advertising & Marketing          Business Services   \n",
              "4                          Insurance Carriers                  Insurance   \n",
              "...                                       ...                        ...   \n",
              "4886  Enterprise Software & Network Solutions     Information Technology   \n",
              "4887                         Federal Agencies                 Government   \n",
              "4888                Biotech & Pharmaceuticals  Biotech & Pharmaceuticals   \n",
              "4889             Computer Hardware & Software     Information Technology   \n",
              "4890    Electrical & Electronic Manufacturing              Manufacturing   \n",
              "\n",
              "                         Revenue  Min_salary  Max_salary  Average_salary State  \n",
              "0       Unknown / Non-Applicable         111         181           146.0    NY  \n",
              "1       Unknown / Non-Applicable         111         181           146.0    NY  \n",
              "2       Unknown / Non-Applicable         111         181           146.0    NJ  \n",
              "3       Unknown / Non-Applicable         111         181           146.0    NY  \n",
              "4       Unknown / Non-Applicable         111         181           146.0    NY  \n",
              "...                          ...         ...         ...             ...   ...  \n",
              "4886  $100 to $500 million (USD)          38          64            51.0    OH  \n",
              "4887    Unknown / Non-Applicable          47          89            68.0    OH  \n",
              "4888    Unknown / Non-Applicable          66         113            89.5    OH  \n",
              "4889  $100 to $500 million (USD)          67         111            89.0    OH  \n",
              "4890    Unknown / Non-Applicable          42          76            59.0    OH  \n",
              "\n",
              "[4891 rows x 17 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-93065f30-c2da-4506-abda-da5529c1afcf\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0.1</th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Job Title</th>\n",
              "      <th>Salary Estimate</th>\n",
              "      <th>Rating</th>\n",
              "      <th>Company Name</th>\n",
              "      <th>Location</th>\n",
              "      <th>Size</th>\n",
              "      <th>Founded</th>\n",
              "      <th>Type of ownership</th>\n",
              "      <th>Industry</th>\n",
              "      <th>Sector</th>\n",
              "      <th>Revenue</th>\n",
              "      <th>Min_salary</th>\n",
              "      <th>Max_salary</th>\n",
              "      <th>Average_salary</th>\n",
              "      <th>State</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>data scientist</td>\n",
              "      <td>['111', '-', '181', '(Glassdoor', 'est.)']</td>\n",
              "      <td>3.5</td>\n",
              "      <td>Hopper\\n3.5</td>\n",
              "      <td>New York, NY</td>\n",
              "      <td>501 to 1000 employees</td>\n",
              "      <td>2007</td>\n",
              "      <td>Company - Private</td>\n",
              "      <td>Travel Agencies</td>\n",
              "      <td>Travel &amp; Tourism</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>111</td>\n",
              "      <td>181</td>\n",
              "      <td>146.0</td>\n",
              "      <td>NY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>data scientist</td>\n",
              "      <td>['111', '-', '181', '(Glassdoor', 'est.)']</td>\n",
              "      <td>4.5</td>\n",
              "      <td>Noom US\\n4.5</td>\n",
              "      <td>New York, NY</td>\n",
              "      <td>1001 to 5000 employees</td>\n",
              "      <td>2008</td>\n",
              "      <td>Company - Private</td>\n",
              "      <td>Health, Beauty, &amp; Fitness</td>\n",
              "      <td>Consumer Services</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>111</td>\n",
              "      <td>181</td>\n",
              "      <td>146.0</td>\n",
              "      <td>NY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>analyst</td>\n",
              "      <td>['111', '-', '181', '(Glassdoor', 'est.)']</td>\n",
              "      <td>3.4</td>\n",
              "      <td>Sapphire Digital\\n3.4</td>\n",
              "      <td>Lyndhurst, NJ</td>\n",
              "      <td>201 to 500 employees</td>\n",
              "      <td>2019</td>\n",
              "      <td>Company - Private</td>\n",
              "      <td>Internet</td>\n",
              "      <td>Information Technology</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>111</td>\n",
              "      <td>181</td>\n",
              "      <td>146.0</td>\n",
              "      <td>NJ</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>data scientist</td>\n",
              "      <td>['111', '-', '181', '(Glassdoor', 'est.)']</td>\n",
              "      <td>3.4</td>\n",
              "      <td>United Entertainment Group\\n3.4</td>\n",
              "      <td>New York, NY</td>\n",
              "      <td>51 to 200 employees</td>\n",
              "      <td>2007</td>\n",
              "      <td>Company - Private</td>\n",
              "      <td>Advertising &amp; Marketing</td>\n",
              "      <td>Business Services</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>111</td>\n",
              "      <td>181</td>\n",
              "      <td>146.0</td>\n",
              "      <td>NY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>data scientist</td>\n",
              "      <td>['111', '-', '181', '(Glassdoor', 'est.)']</td>\n",
              "      <td>2.9</td>\n",
              "      <td>IFG Companies\\n2.9</td>\n",
              "      <td>New York, NY</td>\n",
              "      <td>201 to 500 employees</td>\n",
              "      <td>1985</td>\n",
              "      <td>Company - Private</td>\n",
              "      <td>Insurance Carriers</td>\n",
              "      <td>Insurance</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>111</td>\n",
              "      <td>181</td>\n",
              "      <td>146.0</td>\n",
              "      <td>NY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4886</th>\n",
              "      <td>5495</td>\n",
              "      <td>5881</td>\n",
              "      <td>other</td>\n",
              "      <td>['38', '-', '64', '(Glassdoor', 'est.)']</td>\n",
              "      <td>3.2</td>\n",
              "      <td>CAS\\n3.2</td>\n",
              "      <td>Columbus, OH</td>\n",
              "      <td>1001 to 5000 Employees</td>\n",
              "      <td>1907</td>\n",
              "      <td>Subsidiary or Business Segment</td>\n",
              "      <td>Enterprise Software &amp; Network Solutions</td>\n",
              "      <td>Information Technology</td>\n",
              "      <td>$100 to $500 million (USD)</td>\n",
              "      <td>38</td>\n",
              "      <td>64</td>\n",
              "      <td>51.0</td>\n",
              "      <td>OH</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4887</th>\n",
              "      <td>5496</td>\n",
              "      <td>5882</td>\n",
              "      <td>other</td>\n",
              "      <td>['47', '-', '89', '(Glassdoor', 'est.)']</td>\n",
              "      <td>4.2</td>\n",
              "      <td>Centers for Disease Control and Prevention\\n4.2</td>\n",
              "      <td>Cincinnati, OH</td>\n",
              "      <td>10000+ Employees</td>\n",
              "      <td>1946</td>\n",
              "      <td>Government</td>\n",
              "      <td>Federal Agencies</td>\n",
              "      <td>Government</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>47</td>\n",
              "      <td>89</td>\n",
              "      <td>68.0</td>\n",
              "      <td>OH</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4888</th>\n",
              "      <td>5497</td>\n",
              "      <td>5883</td>\n",
              "      <td>other</td>\n",
              "      <td>['66', '-', '113', '(Glassdoor', 'est.)']</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Certara\\n4.0</td>\n",
              "      <td>Cincinnati, OH</td>\n",
              "      <td>501 to 1000 Employees</td>\n",
              "      <td>2008</td>\n",
              "      <td>Company - Public</td>\n",
              "      <td>Biotech &amp; Pharmaceuticals</td>\n",
              "      <td>Biotech &amp; Pharmaceuticals</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>66</td>\n",
              "      <td>113</td>\n",
              "      <td>89.5</td>\n",
              "      <td>OH</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4889</th>\n",
              "      <td>5498</td>\n",
              "      <td>5886</td>\n",
              "      <td>analyst</td>\n",
              "      <td>['67', '-', '111', '(Glassdoor', 'est.)']</td>\n",
              "      <td>4.0</td>\n",
              "      <td>New Relic\\n4.0</td>\n",
              "      <td>Cincinnati, OH</td>\n",
              "      <td>1001 to 5000 Employees</td>\n",
              "      <td>2008</td>\n",
              "      <td>Company - Public</td>\n",
              "      <td>Computer Hardware &amp; Software</td>\n",
              "      <td>Information Technology</td>\n",
              "      <td>$100 to $500 million (USD)</td>\n",
              "      <td>67</td>\n",
              "      <td>111</td>\n",
              "      <td>89.0</td>\n",
              "      <td>OH</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4890</th>\n",
              "      <td>5499</td>\n",
              "      <td>5887</td>\n",
              "      <td>analyst</td>\n",
              "      <td>['42', '-', '76', '(Glassdoor', 'est.)']</td>\n",
              "      <td>3.6</td>\n",
              "      <td>Hose Master\\n3.6</td>\n",
              "      <td>Euclid, OH</td>\n",
              "      <td>201 to 500 Employees</td>\n",
              "      <td>1982</td>\n",
              "      <td>Company - Private</td>\n",
              "      <td>Electrical &amp; Electronic Manufacturing</td>\n",
              "      <td>Manufacturing</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>42</td>\n",
              "      <td>76</td>\n",
              "      <td>59.0</td>\n",
              "      <td>OH</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4891 rows × 17 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-93065f30-c2da-4506-abda-da5529c1afcf')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-93065f30-c2da-4506-abda-da5529c1afcf button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-93065f30-c2da-4506-abda-da5529c1afcf');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-19962278-1e23-4c5d-9339-3b6bf028d84e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-19962278-1e23-4c5d-9339-3b6bf028d84e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-19962278-1e23-4c5d-9339-3b6bf028d84e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_eb7c43b3-8e29-4211-bd9a-bbdb285bc853\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_eb7c43b3-8e29-4211-bd9a-bbdb285bc853 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 4891,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0.1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1585,\n        \"min\": 0,\n        \"max\": 5499,\n        \"num_unique_values\": 4891,\n        \"samples\": [\n          166,\n          90,\n          2365\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1665,\n        \"min\": 0,\n        \"max\": 5887,\n        \"num_unique_values\": 4891,\n        \"samples\": [\n          166,\n          90,\n          2386\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Job Title\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"analyst\",\n          \"machine learning engineer\",\n          \"data scientist\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Salary Estimate\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1156,\n        \"samples\": [\n          \"['81', '-', '152', '(Glassdoor', 'est.)']\",\n          \"['83', '-', '145', '(Glassdoor', 'est.)']\",\n          \"['200', '-', '250', '(Employer', 'est.)']\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5770038788090343,\n        \"min\": 1.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 37,\n        \"samples\": [\n          4.6,\n          4.1,\n          4.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Company Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2577,\n        \"samples\": [\n          \"Park Computer Systems INC\\n3.9\",\n          \"Forfeiture Support Associates\\n2.8\",\n          \"ON Semiconductor\\n3.6\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Location\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 464,\n        \"samples\": [\n          \"Fort Lee, NJ\",\n          \"Whittier, CA\",\n          \"Seal Beach, CA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Size\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 16,\n        \"samples\": [\n          \"501 to 1000 employees\",\n          \"1001 to 5000 employees\",\n          \"10000+ employees\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Founded\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 658,\n        \"min\": -1,\n        \"max\": 2020,\n        \"num_unique_values\": 203,\n        \"samples\": [\n          1923,\n          1999,\n          1845\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Type of ownership\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"Private Practice / Firm\",\n          \"School / School District\",\n          \"Company - Private\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Industry\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 115,\n        \"samples\": [\n          \"Truck Rental & Leasing\",\n          \"Insurance Carriers\",\n          \"Biotech & Pharmaceuticals\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sector\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 27,\n        \"samples\": [\n          \"Restaurants, Bars & Food Services\",\n          \"Government\",\n          \"Agriculture & Forestry\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Revenue\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"$1 to $2 billion (USD)\",\n          \"$10 to $25 million (USD)\",\n          \"Unknown / Non-Applicable\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Min_salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31,\n        \"min\": 12,\n        \"max\": 200,\n        \"num_unique_values\": 125,\n        \"samples\": [\n          75,\n          94,\n          36\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Max_salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 42,\n        \"min\": 44,\n        \"max\": 386,\n        \"num_unique_values\": 171,\n        \"samples\": [\n          107,\n          89,\n          92\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Average_salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35.749097143930186,\n        \"min\": 37.5,\n        \"max\": 268.0,\n        \"num_unique_values\": 256,\n        \"samples\": [\n          43.0,\n          205.0,\n          65.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"State\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 23,\n        \"samples\": [\n          \"ME\",\n          \"OH\",\n          \"NY\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 97
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Job Title'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kc_OcNlFHh90",
        "outputId": "f13763b9-97d0-4284-ff68-bcd75c0794df"
      },
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Job Title\n",
              "data scientist               1793\n",
              "analyst                      1048\n",
              "other                        1039\n",
              "data engineer                 764\n",
              "machine learning engineer     162\n",
              "manager                        67\n",
              "director                       15\n",
              "deep learning engineer          3\n",
              "Name: count, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 99
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop(columns='Salary Estimate')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 860
        },
        "id": "gPb3gOpkH6HY",
        "outputId": "d6a4e3bc-207d-4c27-e1e4-2609f49ce62e"
      },
      "execution_count": 100,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Unnamed: 0.1  Unnamed: 0       Job Title  Rating  \\\n",
              "0                0           0  data scientist     3.5   \n",
              "1                1           1  data scientist     4.5   \n",
              "2                3           3         analyst     3.4   \n",
              "3                4           4  data scientist     3.4   \n",
              "4                5           5  data scientist     2.9   \n",
              "...            ...         ...             ...     ...   \n",
              "4886          5495        5881           other     3.2   \n",
              "4887          5496        5882           other     4.2   \n",
              "4888          5497        5883           other     4.0   \n",
              "4889          5498        5886         analyst     4.0   \n",
              "4890          5499        5887         analyst     3.6   \n",
              "\n",
              "                                         Company Name        Location  \\\n",
              "0                                         Hopper\\n3.5    New York, NY   \n",
              "1                                        Noom US\\n4.5    New York, NY   \n",
              "2                               Sapphire Digital\\n3.4   Lyndhurst, NJ   \n",
              "3                     United Entertainment Group\\n3.4    New York, NY   \n",
              "4                                  IFG Companies\\n2.9    New York, NY   \n",
              "...                                               ...             ...   \n",
              "4886                                         CAS\\n3.2    Columbus, OH   \n",
              "4887  Centers for Disease Control and Prevention\\n4.2  Cincinnati, OH   \n",
              "4888                                     Certara\\n4.0  Cincinnati, OH   \n",
              "4889                                   New Relic\\n4.0  Cincinnati, OH   \n",
              "4890                                 Hose Master\\n3.6      Euclid, OH   \n",
              "\n",
              "                        Size  Founded               Type of ownership  \\\n",
              "0      501 to 1000 employees     2007               Company - Private   \n",
              "1     1001 to 5000 employees     2008               Company - Private   \n",
              "2       201 to 500 employees     2019               Company - Private   \n",
              "3        51 to 200 employees     2007               Company - Private   \n",
              "4       201 to 500 employees     1985               Company - Private   \n",
              "...                      ...      ...                             ...   \n",
              "4886  1001 to 5000 Employees     1907  Subsidiary or Business Segment   \n",
              "4887        10000+ Employees     1946                      Government   \n",
              "4888   501 to 1000 Employees     2008                Company - Public   \n",
              "4889  1001 to 5000 Employees     2008                Company - Public   \n",
              "4890    201 to 500 Employees     1982               Company - Private   \n",
              "\n",
              "                                     Industry                     Sector  \\\n",
              "0                             Travel Agencies           Travel & Tourism   \n",
              "1                   Health, Beauty, & Fitness          Consumer Services   \n",
              "2                                    Internet     Information Technology   \n",
              "3                     Advertising & Marketing          Business Services   \n",
              "4                          Insurance Carriers                  Insurance   \n",
              "...                                       ...                        ...   \n",
              "4886  Enterprise Software & Network Solutions     Information Technology   \n",
              "4887                         Federal Agencies                 Government   \n",
              "4888                Biotech & Pharmaceuticals  Biotech & Pharmaceuticals   \n",
              "4889             Computer Hardware & Software     Information Technology   \n",
              "4890    Electrical & Electronic Manufacturing              Manufacturing   \n",
              "\n",
              "                         Revenue  Min_salary  Max_salary  Average_salary State  \n",
              "0       Unknown / Non-Applicable         111         181           146.0    NY  \n",
              "1       Unknown / Non-Applicable         111         181           146.0    NY  \n",
              "2       Unknown / Non-Applicable         111         181           146.0    NJ  \n",
              "3       Unknown / Non-Applicable         111         181           146.0    NY  \n",
              "4       Unknown / Non-Applicable         111         181           146.0    NY  \n",
              "...                          ...         ...         ...             ...   ...  \n",
              "4886  $100 to $500 million (USD)          38          64            51.0    OH  \n",
              "4887    Unknown / Non-Applicable          47          89            68.0    OH  \n",
              "4888    Unknown / Non-Applicable          66         113            89.5    OH  \n",
              "4889  $100 to $500 million (USD)          67         111            89.0    OH  \n",
              "4890    Unknown / Non-Applicable          42          76            59.0    OH  \n",
              "\n",
              "[4891 rows x 16 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e2e21914-3bc4-4c30-beca-eb21f5f297bc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0.1</th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Job Title</th>\n",
              "      <th>Rating</th>\n",
              "      <th>Company Name</th>\n",
              "      <th>Location</th>\n",
              "      <th>Size</th>\n",
              "      <th>Founded</th>\n",
              "      <th>Type of ownership</th>\n",
              "      <th>Industry</th>\n",
              "      <th>Sector</th>\n",
              "      <th>Revenue</th>\n",
              "      <th>Min_salary</th>\n",
              "      <th>Max_salary</th>\n",
              "      <th>Average_salary</th>\n",
              "      <th>State</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>data scientist</td>\n",
              "      <td>3.5</td>\n",
              "      <td>Hopper\\n3.5</td>\n",
              "      <td>New York, NY</td>\n",
              "      <td>501 to 1000 employees</td>\n",
              "      <td>2007</td>\n",
              "      <td>Company - Private</td>\n",
              "      <td>Travel Agencies</td>\n",
              "      <td>Travel &amp; Tourism</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>111</td>\n",
              "      <td>181</td>\n",
              "      <td>146.0</td>\n",
              "      <td>NY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>data scientist</td>\n",
              "      <td>4.5</td>\n",
              "      <td>Noom US\\n4.5</td>\n",
              "      <td>New York, NY</td>\n",
              "      <td>1001 to 5000 employees</td>\n",
              "      <td>2008</td>\n",
              "      <td>Company - Private</td>\n",
              "      <td>Health, Beauty, &amp; Fitness</td>\n",
              "      <td>Consumer Services</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>111</td>\n",
              "      <td>181</td>\n",
              "      <td>146.0</td>\n",
              "      <td>NY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>analyst</td>\n",
              "      <td>3.4</td>\n",
              "      <td>Sapphire Digital\\n3.4</td>\n",
              "      <td>Lyndhurst, NJ</td>\n",
              "      <td>201 to 500 employees</td>\n",
              "      <td>2019</td>\n",
              "      <td>Company - Private</td>\n",
              "      <td>Internet</td>\n",
              "      <td>Information Technology</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>111</td>\n",
              "      <td>181</td>\n",
              "      <td>146.0</td>\n",
              "      <td>NJ</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>data scientist</td>\n",
              "      <td>3.4</td>\n",
              "      <td>United Entertainment Group\\n3.4</td>\n",
              "      <td>New York, NY</td>\n",
              "      <td>51 to 200 employees</td>\n",
              "      <td>2007</td>\n",
              "      <td>Company - Private</td>\n",
              "      <td>Advertising &amp; Marketing</td>\n",
              "      <td>Business Services</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>111</td>\n",
              "      <td>181</td>\n",
              "      <td>146.0</td>\n",
              "      <td>NY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>data scientist</td>\n",
              "      <td>2.9</td>\n",
              "      <td>IFG Companies\\n2.9</td>\n",
              "      <td>New York, NY</td>\n",
              "      <td>201 to 500 employees</td>\n",
              "      <td>1985</td>\n",
              "      <td>Company - Private</td>\n",
              "      <td>Insurance Carriers</td>\n",
              "      <td>Insurance</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>111</td>\n",
              "      <td>181</td>\n",
              "      <td>146.0</td>\n",
              "      <td>NY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4886</th>\n",
              "      <td>5495</td>\n",
              "      <td>5881</td>\n",
              "      <td>other</td>\n",
              "      <td>3.2</td>\n",
              "      <td>CAS\\n3.2</td>\n",
              "      <td>Columbus, OH</td>\n",
              "      <td>1001 to 5000 Employees</td>\n",
              "      <td>1907</td>\n",
              "      <td>Subsidiary or Business Segment</td>\n",
              "      <td>Enterprise Software &amp; Network Solutions</td>\n",
              "      <td>Information Technology</td>\n",
              "      <td>$100 to $500 million (USD)</td>\n",
              "      <td>38</td>\n",
              "      <td>64</td>\n",
              "      <td>51.0</td>\n",
              "      <td>OH</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4887</th>\n",
              "      <td>5496</td>\n",
              "      <td>5882</td>\n",
              "      <td>other</td>\n",
              "      <td>4.2</td>\n",
              "      <td>Centers for Disease Control and Prevention\\n4.2</td>\n",
              "      <td>Cincinnati, OH</td>\n",
              "      <td>10000+ Employees</td>\n",
              "      <td>1946</td>\n",
              "      <td>Government</td>\n",
              "      <td>Federal Agencies</td>\n",
              "      <td>Government</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>47</td>\n",
              "      <td>89</td>\n",
              "      <td>68.0</td>\n",
              "      <td>OH</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4888</th>\n",
              "      <td>5497</td>\n",
              "      <td>5883</td>\n",
              "      <td>other</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Certara\\n4.0</td>\n",
              "      <td>Cincinnati, OH</td>\n",
              "      <td>501 to 1000 Employees</td>\n",
              "      <td>2008</td>\n",
              "      <td>Company - Public</td>\n",
              "      <td>Biotech &amp; Pharmaceuticals</td>\n",
              "      <td>Biotech &amp; Pharmaceuticals</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>66</td>\n",
              "      <td>113</td>\n",
              "      <td>89.5</td>\n",
              "      <td>OH</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4889</th>\n",
              "      <td>5498</td>\n",
              "      <td>5886</td>\n",
              "      <td>analyst</td>\n",
              "      <td>4.0</td>\n",
              "      <td>New Relic\\n4.0</td>\n",
              "      <td>Cincinnati, OH</td>\n",
              "      <td>1001 to 5000 Employees</td>\n",
              "      <td>2008</td>\n",
              "      <td>Company - Public</td>\n",
              "      <td>Computer Hardware &amp; Software</td>\n",
              "      <td>Information Technology</td>\n",
              "      <td>$100 to $500 million (USD)</td>\n",
              "      <td>67</td>\n",
              "      <td>111</td>\n",
              "      <td>89.0</td>\n",
              "      <td>OH</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4890</th>\n",
              "      <td>5499</td>\n",
              "      <td>5887</td>\n",
              "      <td>analyst</td>\n",
              "      <td>3.6</td>\n",
              "      <td>Hose Master\\n3.6</td>\n",
              "      <td>Euclid, OH</td>\n",
              "      <td>201 to 500 Employees</td>\n",
              "      <td>1982</td>\n",
              "      <td>Company - Private</td>\n",
              "      <td>Electrical &amp; Electronic Manufacturing</td>\n",
              "      <td>Manufacturing</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>42</td>\n",
              "      <td>76</td>\n",
              "      <td>59.0</td>\n",
              "      <td>OH</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4891 rows × 16 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e2e21914-3bc4-4c30-beca-eb21f5f297bc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e2e21914-3bc4-4c30-beca-eb21f5f297bc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e2e21914-3bc4-4c30-beca-eb21f5f297bc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-06576540-4718-458a-9860-d306df2bdb6d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-06576540-4718-458a-9860-d306df2bdb6d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-06576540-4718-458a-9860-d306df2bdb6d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 4891,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0.1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1585,\n        \"min\": 0,\n        \"max\": 5499,\n        \"num_unique_values\": 4891,\n        \"samples\": [\n          166,\n          90,\n          2365\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1665,\n        \"min\": 0,\n        \"max\": 5887,\n        \"num_unique_values\": 4891,\n        \"samples\": [\n          166,\n          90,\n          2386\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Job Title\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"analyst\",\n          \"machine learning engineer\",\n          \"data scientist\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5770038788090343,\n        \"min\": 1.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 37,\n        \"samples\": [\n          4.6,\n          4.1,\n          4.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Company Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2577,\n        \"samples\": [\n          \"Park Computer Systems INC\\n3.9\",\n          \"Forfeiture Support Associates\\n2.8\",\n          \"ON Semiconductor\\n3.6\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Location\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 464,\n        \"samples\": [\n          \"Fort Lee, NJ\",\n          \"Whittier, CA\",\n          \"Seal Beach, CA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Size\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 16,\n        \"samples\": [\n          \"501 to 1000 employees\",\n          \"1001 to 5000 employees\",\n          \"10000+ employees\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Founded\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 658,\n        \"min\": -1,\n        \"max\": 2020,\n        \"num_unique_values\": 203,\n        \"samples\": [\n          1923,\n          1999,\n          1845\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Type of ownership\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"Private Practice / Firm\",\n          \"School / School District\",\n          \"Company - Private\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Industry\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 115,\n        \"samples\": [\n          \"Truck Rental & Leasing\",\n          \"Insurance Carriers\",\n          \"Biotech & Pharmaceuticals\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sector\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 27,\n        \"samples\": [\n          \"Restaurants, Bars & Food Services\",\n          \"Government\",\n          \"Agriculture & Forestry\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Revenue\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"$1 to $2 billion (USD)\",\n          \"$10 to $25 million (USD)\",\n          \"Unknown / Non-Applicable\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Min_salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31,\n        \"min\": 12,\n        \"max\": 200,\n        \"num_unique_values\": 125,\n        \"samples\": [\n          75,\n          94,\n          36\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Max_salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 42,\n        \"min\": 44,\n        \"max\": 386,\n        \"num_unique_values\": 171,\n        \"samples\": [\n          107,\n          89,\n          92\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Average_salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35.749097143930186,\n        \"min\": 37.5,\n        \"max\": 268.0,\n        \"num_unique_values\": 256,\n        \"samples\": [\n          43.0,\n          205.0,\n          65.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"State\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 23,\n        \"samples\": [\n          \"ME\",\n          \"OH\",\n          \"NY\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 100
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop(columns='Salary Estimate',inplace= True)"
      ],
      "metadata": {
        "id": "u0uEVdE6IRjp"
      },
      "execution_count": 101,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 860
        },
        "id": "N-GKW9VvItOQ",
        "outputId": "1580c833-369a-47b0-c467-6c876db7e1f8"
      },
      "execution_count": 102,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Unnamed: 0.1  Unnamed: 0       Job Title  Rating  \\\n",
              "0                0           0  data scientist     3.5   \n",
              "1                1           1  data scientist     4.5   \n",
              "2                3           3         analyst     3.4   \n",
              "3                4           4  data scientist     3.4   \n",
              "4                5           5  data scientist     2.9   \n",
              "...            ...         ...             ...     ...   \n",
              "4886          5495        5881           other     3.2   \n",
              "4887          5496        5882           other     4.2   \n",
              "4888          5497        5883           other     4.0   \n",
              "4889          5498        5886         analyst     4.0   \n",
              "4890          5499        5887         analyst     3.6   \n",
              "\n",
              "                                         Company Name        Location  \\\n",
              "0                                         Hopper\\n3.5    New York, NY   \n",
              "1                                        Noom US\\n4.5    New York, NY   \n",
              "2                               Sapphire Digital\\n3.4   Lyndhurst, NJ   \n",
              "3                     United Entertainment Group\\n3.4    New York, NY   \n",
              "4                                  IFG Companies\\n2.9    New York, NY   \n",
              "...                                               ...             ...   \n",
              "4886                                         CAS\\n3.2    Columbus, OH   \n",
              "4887  Centers for Disease Control and Prevention\\n4.2  Cincinnati, OH   \n",
              "4888                                     Certara\\n4.0  Cincinnati, OH   \n",
              "4889                                   New Relic\\n4.0  Cincinnati, OH   \n",
              "4890                                 Hose Master\\n3.6      Euclid, OH   \n",
              "\n",
              "                        Size  Founded               Type of ownership  \\\n",
              "0      501 to 1000 employees     2007               Company - Private   \n",
              "1     1001 to 5000 employees     2008               Company - Private   \n",
              "2       201 to 500 employees     2019               Company - Private   \n",
              "3        51 to 200 employees     2007               Company - Private   \n",
              "4       201 to 500 employees     1985               Company - Private   \n",
              "...                      ...      ...                             ...   \n",
              "4886  1001 to 5000 Employees     1907  Subsidiary or Business Segment   \n",
              "4887        10000+ Employees     1946                      Government   \n",
              "4888   501 to 1000 Employees     2008                Company - Public   \n",
              "4889  1001 to 5000 Employees     2008                Company - Public   \n",
              "4890    201 to 500 Employees     1982               Company - Private   \n",
              "\n",
              "                                     Industry                     Sector  \\\n",
              "0                             Travel Agencies           Travel & Tourism   \n",
              "1                   Health, Beauty, & Fitness          Consumer Services   \n",
              "2                                    Internet     Information Technology   \n",
              "3                     Advertising & Marketing          Business Services   \n",
              "4                          Insurance Carriers                  Insurance   \n",
              "...                                       ...                        ...   \n",
              "4886  Enterprise Software & Network Solutions     Information Technology   \n",
              "4887                         Federal Agencies                 Government   \n",
              "4888                Biotech & Pharmaceuticals  Biotech & Pharmaceuticals   \n",
              "4889             Computer Hardware & Software     Information Technology   \n",
              "4890    Electrical & Electronic Manufacturing              Manufacturing   \n",
              "\n",
              "                         Revenue  Min_salary  Max_salary  Average_salary State  \n",
              "0       Unknown / Non-Applicable         111         181           146.0    NY  \n",
              "1       Unknown / Non-Applicable         111         181           146.0    NY  \n",
              "2       Unknown / Non-Applicable         111         181           146.0    NJ  \n",
              "3       Unknown / Non-Applicable         111         181           146.0    NY  \n",
              "4       Unknown / Non-Applicable         111         181           146.0    NY  \n",
              "...                          ...         ...         ...             ...   ...  \n",
              "4886  $100 to $500 million (USD)          38          64            51.0    OH  \n",
              "4887    Unknown / Non-Applicable          47          89            68.0    OH  \n",
              "4888    Unknown / Non-Applicable          66         113            89.5    OH  \n",
              "4889  $100 to $500 million (USD)          67         111            89.0    OH  \n",
              "4890    Unknown / Non-Applicable          42          76            59.0    OH  \n",
              "\n",
              "[4891 rows x 16 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2d6f6175-9d84-4959-926b-1c4c3cf755dd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0.1</th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Job Title</th>\n",
              "      <th>Rating</th>\n",
              "      <th>Company Name</th>\n",
              "      <th>Location</th>\n",
              "      <th>Size</th>\n",
              "      <th>Founded</th>\n",
              "      <th>Type of ownership</th>\n",
              "      <th>Industry</th>\n",
              "      <th>Sector</th>\n",
              "      <th>Revenue</th>\n",
              "      <th>Min_salary</th>\n",
              "      <th>Max_salary</th>\n",
              "      <th>Average_salary</th>\n",
              "      <th>State</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>data scientist</td>\n",
              "      <td>3.5</td>\n",
              "      <td>Hopper\\n3.5</td>\n",
              "      <td>New York, NY</td>\n",
              "      <td>501 to 1000 employees</td>\n",
              "      <td>2007</td>\n",
              "      <td>Company - Private</td>\n",
              "      <td>Travel Agencies</td>\n",
              "      <td>Travel &amp; Tourism</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>111</td>\n",
              "      <td>181</td>\n",
              "      <td>146.0</td>\n",
              "      <td>NY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>data scientist</td>\n",
              "      <td>4.5</td>\n",
              "      <td>Noom US\\n4.5</td>\n",
              "      <td>New York, NY</td>\n",
              "      <td>1001 to 5000 employees</td>\n",
              "      <td>2008</td>\n",
              "      <td>Company - Private</td>\n",
              "      <td>Health, Beauty, &amp; Fitness</td>\n",
              "      <td>Consumer Services</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>111</td>\n",
              "      <td>181</td>\n",
              "      <td>146.0</td>\n",
              "      <td>NY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>analyst</td>\n",
              "      <td>3.4</td>\n",
              "      <td>Sapphire Digital\\n3.4</td>\n",
              "      <td>Lyndhurst, NJ</td>\n",
              "      <td>201 to 500 employees</td>\n",
              "      <td>2019</td>\n",
              "      <td>Company - Private</td>\n",
              "      <td>Internet</td>\n",
              "      <td>Information Technology</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>111</td>\n",
              "      <td>181</td>\n",
              "      <td>146.0</td>\n",
              "      <td>NJ</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>data scientist</td>\n",
              "      <td>3.4</td>\n",
              "      <td>United Entertainment Group\\n3.4</td>\n",
              "      <td>New York, NY</td>\n",
              "      <td>51 to 200 employees</td>\n",
              "      <td>2007</td>\n",
              "      <td>Company - Private</td>\n",
              "      <td>Advertising &amp; Marketing</td>\n",
              "      <td>Business Services</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>111</td>\n",
              "      <td>181</td>\n",
              "      <td>146.0</td>\n",
              "      <td>NY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>data scientist</td>\n",
              "      <td>2.9</td>\n",
              "      <td>IFG Companies\\n2.9</td>\n",
              "      <td>New York, NY</td>\n",
              "      <td>201 to 500 employees</td>\n",
              "      <td>1985</td>\n",
              "      <td>Company - Private</td>\n",
              "      <td>Insurance Carriers</td>\n",
              "      <td>Insurance</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>111</td>\n",
              "      <td>181</td>\n",
              "      <td>146.0</td>\n",
              "      <td>NY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4886</th>\n",
              "      <td>5495</td>\n",
              "      <td>5881</td>\n",
              "      <td>other</td>\n",
              "      <td>3.2</td>\n",
              "      <td>CAS\\n3.2</td>\n",
              "      <td>Columbus, OH</td>\n",
              "      <td>1001 to 5000 Employees</td>\n",
              "      <td>1907</td>\n",
              "      <td>Subsidiary or Business Segment</td>\n",
              "      <td>Enterprise Software &amp; Network Solutions</td>\n",
              "      <td>Information Technology</td>\n",
              "      <td>$100 to $500 million (USD)</td>\n",
              "      <td>38</td>\n",
              "      <td>64</td>\n",
              "      <td>51.0</td>\n",
              "      <td>OH</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4887</th>\n",
              "      <td>5496</td>\n",
              "      <td>5882</td>\n",
              "      <td>other</td>\n",
              "      <td>4.2</td>\n",
              "      <td>Centers for Disease Control and Prevention\\n4.2</td>\n",
              "      <td>Cincinnati, OH</td>\n",
              "      <td>10000+ Employees</td>\n",
              "      <td>1946</td>\n",
              "      <td>Government</td>\n",
              "      <td>Federal Agencies</td>\n",
              "      <td>Government</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>47</td>\n",
              "      <td>89</td>\n",
              "      <td>68.0</td>\n",
              "      <td>OH</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4888</th>\n",
              "      <td>5497</td>\n",
              "      <td>5883</td>\n",
              "      <td>other</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Certara\\n4.0</td>\n",
              "      <td>Cincinnati, OH</td>\n",
              "      <td>501 to 1000 Employees</td>\n",
              "      <td>2008</td>\n",
              "      <td>Company - Public</td>\n",
              "      <td>Biotech &amp; Pharmaceuticals</td>\n",
              "      <td>Biotech &amp; Pharmaceuticals</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>66</td>\n",
              "      <td>113</td>\n",
              "      <td>89.5</td>\n",
              "      <td>OH</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4889</th>\n",
              "      <td>5498</td>\n",
              "      <td>5886</td>\n",
              "      <td>analyst</td>\n",
              "      <td>4.0</td>\n",
              "      <td>New Relic\\n4.0</td>\n",
              "      <td>Cincinnati, OH</td>\n",
              "      <td>1001 to 5000 Employees</td>\n",
              "      <td>2008</td>\n",
              "      <td>Company - Public</td>\n",
              "      <td>Computer Hardware &amp; Software</td>\n",
              "      <td>Information Technology</td>\n",
              "      <td>$100 to $500 million (USD)</td>\n",
              "      <td>67</td>\n",
              "      <td>111</td>\n",
              "      <td>89.0</td>\n",
              "      <td>OH</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4890</th>\n",
              "      <td>5499</td>\n",
              "      <td>5887</td>\n",
              "      <td>analyst</td>\n",
              "      <td>3.6</td>\n",
              "      <td>Hose Master\\n3.6</td>\n",
              "      <td>Euclid, OH</td>\n",
              "      <td>201 to 500 Employees</td>\n",
              "      <td>1982</td>\n",
              "      <td>Company - Private</td>\n",
              "      <td>Electrical &amp; Electronic Manufacturing</td>\n",
              "      <td>Manufacturing</td>\n",
              "      <td>Unknown / Non-Applicable</td>\n",
              "      <td>42</td>\n",
              "      <td>76</td>\n",
              "      <td>59.0</td>\n",
              "      <td>OH</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4891 rows × 16 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2d6f6175-9d84-4959-926b-1c4c3cf755dd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2d6f6175-9d84-4959-926b-1c4c3cf755dd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2d6f6175-9d84-4959-926b-1c4c3cf755dd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-81a28248-b1a4-46c8-93d1-1a1bde502c6a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-81a28248-b1a4-46c8-93d1-1a1bde502c6a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-81a28248-b1a4-46c8-93d1-1a1bde502c6a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_72abbed8-c70c-4f51-8f73-ad6f2940ed41\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_72abbed8-c70c-4f51-8f73-ad6f2940ed41 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 4891,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0.1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1585,\n        \"min\": 0,\n        \"max\": 5499,\n        \"num_unique_values\": 4891,\n        \"samples\": [\n          166,\n          90,\n          2365\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1665,\n        \"min\": 0,\n        \"max\": 5887,\n        \"num_unique_values\": 4891,\n        \"samples\": [\n          166,\n          90,\n          2386\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Job Title\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"analyst\",\n          \"machine learning engineer\",\n          \"data scientist\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5770038788090343,\n        \"min\": 1.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 37,\n        \"samples\": [\n          4.6,\n          4.1,\n          4.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Company Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2577,\n        \"samples\": [\n          \"Park Computer Systems INC\\n3.9\",\n          \"Forfeiture Support Associates\\n2.8\",\n          \"ON Semiconductor\\n3.6\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Location\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 464,\n        \"samples\": [\n          \"Fort Lee, NJ\",\n          \"Whittier, CA\",\n          \"Seal Beach, CA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Size\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 16,\n        \"samples\": [\n          \"501 to 1000 employees\",\n          \"1001 to 5000 employees\",\n          \"10000+ employees\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Founded\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 658,\n        \"min\": -1,\n        \"max\": 2020,\n        \"num_unique_values\": 203,\n        \"samples\": [\n          1923,\n          1999,\n          1845\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Type of ownership\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"Private Practice / Firm\",\n          \"School / School District\",\n          \"Company - Private\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Industry\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 115,\n        \"samples\": [\n          \"Truck Rental & Leasing\",\n          \"Insurance Carriers\",\n          \"Biotech & Pharmaceuticals\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sector\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 27,\n        \"samples\": [\n          \"Restaurants, Bars & Food Services\",\n          \"Government\",\n          \"Agriculture & Forestry\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Revenue\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"$1 to $2 billion (USD)\",\n          \"$10 to $25 million (USD)\",\n          \"Unknown / Non-Applicable\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Min_salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31,\n        \"min\": 12,\n        \"max\": 200,\n        \"num_unique_values\": 125,\n        \"samples\": [\n          75,\n          94,\n          36\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Max_salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 42,\n        \"min\": 44,\n        \"max\": 386,\n        \"num_unique_values\": 171,\n        \"samples\": [\n          107,\n          89,\n          92\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Average_salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35.749097143930186,\n        \"min\": 37.5,\n        \"max\": 268.0,\n        \"num_unique_values\": 256,\n        \"samples\": [\n          43.0,\n          205.0,\n          65.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"State\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 23,\n        \"samples\": [\n          \"ME\",\n          \"OH\",\n          \"NY\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 102
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pmH3xPJ4I8uW",
        "outputId": "60878685-93df-4502-c00c-c444e9502fbe"
      },
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Unnamed: 0.1', 'Unnamed: 0', 'Job Title', 'Rating', 'Company Name',\n",
              "       'Location', 'Size', 'Founded', 'Type of ownership', 'Industry',\n",
              "       'Sector', 'Revenue', 'Min_salary', 'Max_salary', 'Average_salary',\n",
              "       'State'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 103
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df= df.drop(columns=['Unnamed: 0.1', 'Unnamed: 0', 'Company Name',\n",
        "       'Location', 'Size', 'Founded', 'Type of ownership', 'Industry',\n",
        "       'Sector', 'Revenue', 'Min_salary', 'Max_salary'])"
      ],
      "metadata": {
        "id": "khPY5GkOJCN7"
      },
      "execution_count": 107,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "vpWsVvxxJ3jy",
        "outputId": "82e43750-f8fd-4db3-ab58-a2cf67659be7"
      },
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Job Title  Rating  Average_salary State\n",
              "0     data scientist     3.5           146.0    NY\n",
              "1     data scientist     4.5           146.0    NY\n",
              "2            analyst     3.4           146.0    NJ\n",
              "3     data scientist     3.4           146.0    NY\n",
              "4     data scientist     2.9           146.0    NY\n",
              "...              ...     ...             ...   ...\n",
              "4886           other     3.2            51.0    OH\n",
              "4887           other     4.2            68.0    OH\n",
              "4888           other     4.0            89.5    OH\n",
              "4889         analyst     4.0            89.0    OH\n",
              "4890         analyst     3.6            59.0    OH\n",
              "\n",
              "[4891 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3ff4fabf-b81a-4fff-8465-29bf22db2adb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Job Title</th>\n",
              "      <th>Rating</th>\n",
              "      <th>Average_salary</th>\n",
              "      <th>State</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>data scientist</td>\n",
              "      <td>3.5</td>\n",
              "      <td>146.0</td>\n",
              "      <td>NY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>data scientist</td>\n",
              "      <td>4.5</td>\n",
              "      <td>146.0</td>\n",
              "      <td>NY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>analyst</td>\n",
              "      <td>3.4</td>\n",
              "      <td>146.0</td>\n",
              "      <td>NJ</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>data scientist</td>\n",
              "      <td>3.4</td>\n",
              "      <td>146.0</td>\n",
              "      <td>NY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>data scientist</td>\n",
              "      <td>2.9</td>\n",
              "      <td>146.0</td>\n",
              "      <td>NY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4886</th>\n",
              "      <td>other</td>\n",
              "      <td>3.2</td>\n",
              "      <td>51.0</td>\n",
              "      <td>OH</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4887</th>\n",
              "      <td>other</td>\n",
              "      <td>4.2</td>\n",
              "      <td>68.0</td>\n",
              "      <td>OH</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4888</th>\n",
              "      <td>other</td>\n",
              "      <td>4.0</td>\n",
              "      <td>89.5</td>\n",
              "      <td>OH</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4889</th>\n",
              "      <td>analyst</td>\n",
              "      <td>4.0</td>\n",
              "      <td>89.0</td>\n",
              "      <td>OH</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4890</th>\n",
              "      <td>analyst</td>\n",
              "      <td>3.6</td>\n",
              "      <td>59.0</td>\n",
              "      <td>OH</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4891 rows × 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3ff4fabf-b81a-4fff-8465-29bf22db2adb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3ff4fabf-b81a-4fff-8465-29bf22db2adb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3ff4fabf-b81a-4fff-8465-29bf22db2adb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-125d1ec1-e52e-47b9-b09a-215a602816c4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-125d1ec1-e52e-47b9-b09a-215a602816c4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-125d1ec1-e52e-47b9-b09a-215a602816c4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_b758d388-c56c-4b1f-9850-efe1b450b328\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_b758d388-c56c-4b1f-9850-efe1b450b328 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 4891,\n  \"fields\": [\n    {\n      \"column\": \"Job Title\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"analyst\",\n          \"machine learning engineer\",\n          \"data scientist\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5770038788090343,\n        \"min\": 1.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 37,\n        \"samples\": [\n          4.6,\n          4.1,\n          4.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Average_salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35.749097143930186,\n        \"min\": 37.5,\n        \"max\": 268.0,\n        \"num_unique_values\": 256,\n        \"samples\": [\n          43.0,\n          205.0,\n          65.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"State\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 23,\n        \"samples\": [\n          \"ME\",\n          \"OH\",\n          \"NY\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 108
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Average_salary'].hist(bins=10,color='blue')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 448
        },
        "id": "YD0KwjXWOfNT",
        "outputId": "ae9d8b0f-1085-45e3-ce57-ead536772d6a"
      },
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 109
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Rating'].hist(bins=10,color='red')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 448
        },
        "id": "PRqsjgDrO9-k",
        "outputId": "94b9d8c7-314b-46f6-aae3-38f34b594706"
      },
      "execution_count": 110,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 110
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "2o0AG4e-PW7g"
      },
      "execution_count": 111,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.displot(x='Rating',data=df,bins=10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 524
        },
        "id": "6GLYfNq4Ppfx",
        "outputId": "4e99a3a5-427e-49b4-8f5d-04e816015856"
      },
      "execution_count": 112,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7dff04cb0640>"
            ]
          },
          "metadata": {},
          "execution_count": 112
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAekAAAHpCAYAAACmzsSXAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAybUlEQVR4nO3de1TVdb7/8ddGBLwBonErUCpDNC+pSdhNkxEvdXRypiw0Ojna8YBlNqae470m0xzvjOZMas3R6XLW6DTWqKgppUSKMQqRWZm4jA3DIOy8cf3+/ui4f21FE4S9Pw7Px1p7Lff3+9l839/vmjXP9gW2zbIsSwAAwDhenh4AAADUjkgDAGAoIg0AgKGINAAAhiLSAAAYikgDAGAoIg0AgKGI9FWwLEsOh0P8SjkAwJ2I9FX4/vvvFRAQoO+//97TowAAmhAiDQCAoYg0AACGItIAABiKSAMAYCgiDQCAoYg0AACGItIAABiKSAMAYCiPRjo9PV0PPfSQwsPDZbPZtHnz5suu/Y//+A/ZbDYtXbrUZXtJSYkSExPl7++vwMBAjR07VqdPn3ZZc+jQId17773y8/NTRESEFi5c2AhnAwBAw/JopM+cOaMePXooNTX1ius2bdqkTz75ROHh4ZfsS0xMVG5urtLS0rRlyxalp6dr/Pjxzv0Oh0ODBg1Shw4dlJWVpVdffVVz5szRmjVrGvx8AABoSN6ePPiQIUM0ZMiQK645efKkJk6cqG3btmnYsGEu+/Ly8rR161bt379fffr0kSStWLFCQ4cO1aJFixQeHq4NGzaooqJCa9eulY+Pj7p27ars7GwtXrzYJeY/Vl5ervLycud9h8NxjWcKAEDdGf2edE1NjcaMGaMpU6aoa9eul+zPyMhQYGCgM9CSFB8fLy8vL2VmZjrX3HffffLx8XGuSUhI0JEjR3Tq1Klajzt//nwFBAQ4bxEREQ18ZgAA/DSjI71gwQJ5e3vrmWeeqXW/3W5XcHCwyzZvb28FBQXJbrc714SEhLisuXD/wpqLTZ8+XWVlZc7biRMnrvVUAACoM4++3H0lWVlZWrZsmQ4ePCibzebWY/v6+srX19etxwQA4GLGPpP+6KOPVFRUpMjISHl7e8vb21vHjx/X888/r44dO0qSQkNDVVRU5PK4qqoqlZSUKDQ01LmmsLDQZc2F+xfWAABgImMjPWbMGB06dEjZ2dnOW3h4uKZMmaJt27ZJkuLi4lRaWqqsrCzn43bt2qWamhrFxsY616Snp6uystK5Ji0tTdHR0Wrbtq17TwoAgDrw6Mvdp0+f1ldffeW8f+zYMWVnZysoKEiRkZFq166dy/rmzZsrNDRU0dHRkqSYmBgNHjxY48aN0+rVq1VZWamUlBSNGjXK+etajz/+uObOnauxY8dq6tSpysnJ0bJly7RkyRL3nSgAAPXg0UgfOHBAAwYMcN6fPHmyJCkpKUnr16+/qp+xYcMGpaSkaODAgfLy8tLIkSO1fPly5/6AgABt375dycnJ6t27t9q3b69Zs2Zd9tevAAAwhc2yLMvTQ5jO4XAoICBAZWVl8vf39/Q4AOooPz9fxcXFnh7DRfv27RUZGenpMWA4Yz/dDQANIT8/X507x+jcubOeHsVFixYt9cUXeYQaV0SkAfxLKy4u1rlzZxX71Gz5h3X09DiSJEfBt8pcO1fFxcVEGldEpAE0Cf5hHRUUGe3pMYA6MfZXsAAAaOqINAAAhiLSAAAYikgDAGAoIg0AgKGINAAAhiLSAAAYikgDAGAoIg0AgKGINAAAhiLSAAAYikgDAGAoIg0AgKGINAAAhiLSAAAYikgDAGAoIg0AgKGINAAAhiLSAAAYikgDAGAoIg0AgKGINAAAhiLSAAAYikgDAGAoIg0AgKGINAAAhiLSAAAYikgDAGAoIg0AgKGINAAAhiLSAAAYikgDAGAoIg0AgKGINAAAhiLSAAAYikgDAGAoIg0AgKGINAAAhiLSAAAYikgDAGAoIg0AgKGINAAAhiLSAAAYikgDAGAoIg0AgKE8Gun09HQ99NBDCg8Pl81m0+bNm537KisrNXXqVHXr1k2tWrVSeHi4nnjiCX333XcuP6OkpESJiYny9/dXYGCgxo4dq9OnT7usOXTokO699175+fkpIiJCCxcudMfpAQBwTTwa6TNnzqhHjx5KTU29ZN/Zs2d18OBBzZw5UwcPHtSf//xnHTlyRP/2b//msi4xMVG5ublKS0vTli1blJ6ervHjxzv3OxwODRo0SB06dFBWVpZeffVVzZkzR2vWrGn08wMA4Fp4e/LgQ4YM0ZAhQ2rdFxAQoLS0NJdtK1euVN++fZWfn6/IyEjl5eVp69at2r9/v/r06SNJWrFihYYOHapFixYpPDxcGzZsUEVFhdauXSsfHx917dpV2dnZWrx4sUvMf6y8vFzl5eXO+w6Ho4HOGACAq+fRSNdVWVmZbDabAgMDJUkZGRkKDAx0BlqS4uPj5eXlpczMTP385z9XRkaG7rvvPvn4+DjXJCQkaMGCBTp16pTatm17yXHmz5+vuXPnNvr5AGja8vLyPD2Ci/bt2ysyMtLTY+BHrptInz9/XlOnTtVjjz0mf39/SZLdbldwcLDLOm9vbwUFBclutzvXREVFuawJCQlx7qst0tOnT9fkyZOd9x0OhyIiIhr0fAA0XefK/inJptGjR3t6FBctWrTUF1/kEWqDXBeRrqys1COPPCLLsrRq1apGP56vr698fX0b/TgAmqbKs99LstTz8am6Iaqzp8eRJDkKvlXm2rkqLi4m0gYxPtIXAn38+HHt2rXL+SxakkJDQ1VUVOSyvqqqSiUlJQoNDXWuKSwsdFlz4f6FNQDgCa2DIxUUGe3pMWAwo39P+kKgjx49qh07dqhdu3Yu++Pi4lRaWqqsrCzntl27dqmmpkaxsbHONenp6aqsrHSuSUtLU3R0dK0vdQMAYAqPRvr06dPKzs5Wdna2JOnYsWPKzs5Wfn6+Kisr9Ytf/EIHDhzQhg0bVF1dLbvdLrvdroqKCklSTEyMBg8erHHjxunTTz/V3r17lZKSolGjRik8PFyS9Pjjj8vHx0djx45Vbm6u3n77bS1btszlPWcAAEzk0Ze7Dxw4oAEDBjjvXwhnUlKS5syZo/fee0+S1LNnT5fHffjhh+rfv78kacOGDUpJSdHAgQPl5eWlkSNHavny5c61AQEB2r59u5KTk9W7d2+1b99es2bNuuyvXwEAYAqPRrp///6yLOuy+6+074KgoCBt3Ljximu6d++ujz76qM7zAQDgSUa/Jw0AQFNGpAEAMBSRBgDAUEQaAABDEWkAAAxFpAEAMBSRBgDAUEQaAABDEWkAAAxFpAEAMBSRBgDAUEQaAABDEWkAAAxFpAEAMBSRBgDAUEQaAABDEWkAAAxFpAEAMBSRBgDAUEQaAABDEWkAAAxFpAEAMBSRBgDAUEQaAABDEWkAAAxFpAEAMBSRBgDAUEQaAABDEWkAAAxFpAEAMBSRBgDAUEQaAABDEWkAAAxFpAEAMBSRBgDAUEQaAABDEWkAAAxFpAEAMBSRBgDAUEQaAABDEWkAAAxFpAEAMBSRBgDAUEQaAABDEWkAAAxFpAEAMBSRBgDAUEQaAABDeTTS6enpeuihhxQeHi6bzabNmze77LcsS7NmzVJYWJhatGih+Ph4HT161GVNSUmJEhMT5e/vr8DAQI0dO1anT592WXPo0CHde++98vPzU0REhBYuXNjYpwYAwDXzaKTPnDmjHj16KDU1tdb9Cxcu1PLly7V69WplZmaqVatWSkhI0Pnz551rEhMTlZubq7S0NG3ZskXp6ekaP368c7/D4dCgQYPUoUMHZWVl6dVXX9WcOXO0Zs2aRj8/AACuhbcnDz5kyBANGTKk1n2WZWnp0qWaMWOGhg8fLkl68803FRISos2bN2vUqFHKy8vT1q1btX//fvXp00eStGLFCg0dOlSLFi1SeHi4NmzYoIqKCq1du1Y+Pj7q2rWrsrOztXjxYpeYAwBgGmPfkz527Jjsdrvi4+Od2wICAhQbG6uMjAxJUkZGhgIDA52BlqT4+Hh5eXkpMzPTuea+++6Tj4+Pc01CQoKOHDmiU6dO1Xrs8vJyORwOlxsAAO5mbKTtdrskKSQkxGV7SEiIc5/dbldwcLDLfm9vbwUFBbmsqe1n/PgYF5s/f74CAgKct4iIiGs/IQAA6sjYSHvS9OnTVVZW5rydOHHC0yMBAJogYyMdGhoqSSosLHTZXlhY6NwXGhqqoqIil/1VVVUqKSlxWVPbz/jxMS7m6+srf39/lxsAAO5mbKSjoqIUGhqqnTt3Orc5HA5lZmYqLi5OkhQXF6fS0lJlZWU51+zatUs1NTWKjY11rklPT1dlZaVzTVpamqKjo9W2bVs3nQ0AAHXn0UifPn1a2dnZys7OlvTDh8Wys7OVn58vm82mSZMm6aWXXtJ7772nw4cP64knnlB4eLhGjBghSYqJidHgwYM1btw4ffrpp9q7d69SUlI0atQohYeHS5Ief/xx+fj4aOzYscrNzdXbb7+tZcuWafLkyR46awAAro5HfwXrwIEDGjBggPP+hXAmJSVp/fr1euGFF3TmzBmNHz9epaWluueee7R161b5+fk5H7NhwwalpKRo4MCB8vLy0siRI7V8+XLn/oCAAG3fvl3Jycnq3bu32rdvr1mzZvHrVwAA43k00v3795dlWZfdb7PZNG/ePM2bN++ya4KCgrRx48YrHqd79+766KOP6j0nAACeYOx70gAANHVEGgAAQxFpAAAMRaQBADAUkQYAwFBEGgAAQxFpAAAMRaQBADAUkQYAwFBEGgAAQxFpAAAMRaQBADAUkQYAwFBEGgAAQxFpAAAMRaQBADAUkQYAwFBEGgAAQxFpAAAMRaQBADAUkQYAwFBEGgAAQxFpAAAMRaQBADAUkQYAwFBEGgAAQxFpAAAMRaQBADAUkQYAwFBEGgAAQxFpAAAMRaQBADAUkQYAwFBEGgAAQxFpAAAMRaQBADAUkQYAwFBEGgAAQxFpAAAMRaQBADAUkQYAwFBEGgAAQxFpAAAMRaQBADAUkQYAwFBEGgAAQxFpAAAMRaQBADCU0ZGurq7WzJkzFRUVpRYtWuiWW27Riy++KMuynGssy9KsWbMUFhamFi1aKD4+XkePHnX5OSUlJUpMTJS/v78CAwM1duxYnT592t2nAwBAnRgd6QULFmjVqlVauXKl8vLytGDBAi1cuFArVqxwrlm4cKGWL1+u1atXKzMzU61atVJCQoLOnz/vXJOYmKjc3FylpaVpy5YtSk9P1/jx4z1xSgAAXDVvTw9wJfv27dPw4cM1bNgwSVLHjh31pz/9SZ9++qmkH55FL126VDNmzNDw4cMlSW+++aZCQkK0efNmjRo1Snl5edq6dav279+vPn36SJJWrFihoUOHatGiRQoPD/fMyQEA8BOMfibdr18/7dy5U19++aUk6e9//7s+/vhjDRkyRJJ07Ngx2e12xcfHOx8TEBCg2NhYZWRkSJIyMjIUGBjoDLQkxcfHy8vLS5mZmbUet7y8XA6Hw+UGAIC7Gf1Metq0aXI4HOrcubOaNWum6upq/eY3v1FiYqIkyW63S5JCQkJcHhcSEuLcZ7fbFRwc7LLf29tbQUFBzjUXmz9/vubOndvQpwM0Cfn5+SouLvb0GE55eXmeHgGoN6Mj/c4772jDhg3auHGjunbtquzsbE2aNEnh4eFKSkpqtONOnz5dkydPdt53OByKiIhotOMB/yry8/PVuXOMzp076+lRLlFZXuHpEYA6MzrSU6ZM0bRp0zRq1ChJUrdu3XT8+HHNnz9fSUlJCg0NlSQVFhYqLCzM+bjCwkL17NlTkhQaGqqioiKXn1tVVaWSkhLn4y/m6+srX1/fRjgj4F9bcXGxzp07q9inZss/rKOnx5EkFRzOUM57a1RVVeXpUYA6MzrSZ8+elZeX69vmzZo1U01NjSQpKipKoaGh2rlzpzPKDodDmZmZmjBhgiQpLi5OpaWlysrKUu/evSVJu3btUk1NjWJjY913MkAT4h/WUUGR0Z4eQ5LkKPjW0yMA9WZ0pB966CH95je/UWRkpLp27arPPvtMixcv1lNPPSVJstlsmjRpkl566SV16tRJUVFRmjlzpsLDwzVixAhJUkxMjAYPHqxx48Zp9erVqqysVEpKikaNGsUnuwEARjM60itWrNDMmTP1n//5nyoqKlJ4eLiefvppzZo1y7nmhRde0JkzZzR+/HiVlpbqnnvu0datW+Xn5+dcs2HDBqWkpGjgwIHy8vLSyJEjtXz5ck+cEgAAV61ekb755pu1f/9+tWvXzmV7aWmpevXqpW+++aZBhmvTpo2WLl2qpUuXXnaNzWbTvHnzNG/evMuuCQoK0saNGxtkJgAA3KVevyf97bffqrq6+pLt5eXlOnny5DUPBQAA6vhM+r333nP+e9u2bQoICHDer66u1s6dO9WxY8cGGw4AgKasTpG+8GEsm812ye8pN2/eXB07dtRvf/vbBhsOAICmrE6R/vGvPu3fv1/t27dvlKEAAEA9Pzh27Nixhp4DAABcpN6/grVz507t3LlTRUVFzmfYF6xdu/aaBwMAoKmrV6Tnzp2refPmqU+fPgoLC5PNZmvouQAAaPLqFenVq1dr/fr1GjNmTEPPAwAA/k+9fk+6oqJC/fr1a+hZAADAj9Qr0r/61a/4C14AADSyer3cff78ea1Zs0Y7duxQ9+7d1bx5c5f9ixcvbpDhAABoyuoV6UOHDjm/GjInJ8dlHx8iAwCgYdQr0h9++GFDzwEAAC5Sr/ekAQBA46vXM+kBAwZc8WXtXbt21XsgAIDn5OXleXoEF+3bt1dkZKSnx/CYekX6wvvRF1RWVio7O1s5OTmXfPEGAMB858r+Kcmm0aNHe3oUFy1atNQXX+Q12VDXK9JLliypdfucOXN0+vTpaxoIAOB+lWe/l2Sp5+NTdUNUZ0+PI0lyFHyrzLVzVVxcTKQbwujRo9W3b18tWrSoIX8sAMBNWgdHKigy2tNj4P806AfHMjIy5Ofn15A/EgCAJqtez6Qffvhhl/uWZamgoEAHDhzQzJkzG2QwAACaunpFOiAgwOW+l5eXoqOjNW/ePA0aNKhBBgMAoKmrV6TXrVvX0HMAAICLXNMHx7Kyspy/U9e1a1fdcccdDTIUAACoZ6SLioo0atQo7d69W4GBgZKk0tJSDRgwQG+99ZZuuOGGhpwRAIAmqV6f7p44caK+//575ebmqqSkRCUlJcrJyZHD4dAzzzzT0DMCANAk1euZ9NatW7Vjxw7FxMQ4t3Xp0kWpqal8cAwAgAZSr2fSNTU1l3yHtCQ1b95cNTU11zwUAACoZ6QfeOABPfvss/ruu++c206ePKnnnntOAwcObLDhAABoyuoV6ZUrV8rhcKhjx4665ZZbdMsttygqKkoOh0MrVqxo6BkBAGiS6vWedEREhA4ePKgdO3boiy++kCTFxMQoPj6+QYcDAKApq9Mz6V27dqlLly5yOByy2Wz62c9+pokTJ2rixIm688471bVrV3300UeNNSsAAE1KnSK9dOlSjRs3Tv7+/pfsCwgI0NNPP63Fixc32HAAADRldYr03//+dw0ePPiy+wcNGqSsrKxrHgoAANQx0oWFhbX+6tUF3t7e+sc//nHNQwEAgDpG+sYbb1ROTs5l9x86dEhhYWHXPBQAAKhjpIcOHaqZM2fq/Pnzl+w7d+6cZs+erQcffLDBhgMAoCmr069gzZgxQ3/+85912223KSUlRdHR0ZKkL774QqmpqaqurtZ///d/N8qgAAA0NXWKdEhIiPbt26cJEyZo+vTpsixLkmSz2ZSQkKDU1FSFhIQ0yqAAADQ1df5jJh06dNAHH3ygU6dO6auvvpJlWerUqZPatm3bGPMBANBk1esvjklS27ZtdeeddzbkLAAA4Efq9be7AQBA4yPSAAAYikgDAGAoIg0AgKGINAAAhiLSAAAYikgDAGAoIg0AgKGMj/TJkyc1evRotWvXTi1atFC3bt104MAB537LsjRr1iyFhYWpRYsWio+P19GjR11+RklJiRITE+Xv76/AwECNHTtWp0+fdvepAABQJ0ZH+tSpU7r77rvVvHlz/e1vf9Pnn3+u3/72ty5/gnThwoVavny5Vq9erczMTLVq1UoJCQku39SVmJio3NxcpaWlacuWLUpPT9f48eM9cUoAAFy1ev9ZUHdYsGCBIiIitG7dOue2qKgo578ty9LSpUs1Y8YMDR8+XJL05ptvKiQkRJs3b9aoUaOUl5enrVu3av/+/erTp48kacWKFRo6dKgWLVqk8PBw954UAABXyehn0u+995769OmjX/7ylwoODtYdd9yh3//+9879x44dk91uV3x8vHNbQECAYmNjlZGRIUnKyMhQYGCgM9CSFB8fLy8vL2VmZtZ63PLycjkcDpcbAADuZnSkv/nmG61atUqdOnXStm3bNGHCBD3zzDN64403JEl2u12SLvl6zJCQEOc+u92u4OBgl/3e3t4KCgpyrrnY/PnzFRAQ4LxFREQ09KkBAPCTjI50TU2NevXqpZdffll33HGHxo8fr3Hjxmn16tWNetzp06errKzMeTtx4kSjHg8AgNoYHemwsDB16dLFZVtMTIzy8/MlSaGhoZKkwsJClzWFhYXOfaGhoSoqKnLZX1VVpZKSEueai/n6+srf39/lBgCAuxkd6bvvvltHjhxx2fbll1+qQ4cOkn74EFloaKh27tzp3O9wOJSZmam4uDhJUlxcnEpLS5WVleVcs2vXLtXU1Cg2NtYNZwEAQP0Y/enu5557Tv369dPLL7+sRx55RJ9++qnWrFmjNWvWSJJsNpsmTZqkl156SZ06dVJUVJRmzpyp8PBwjRgxQtIPz7wHDx7sfJm8srJSKSkpGjVqFJ/sBgAYzehI33nnndq0aZOmT5+uefPmKSoqSkuXLlViYqJzzQsvvKAzZ85o/PjxKi0t1T333KOtW7fKz8/PuWbDhg1KSUnRwIED5eXlpZEjR2r58uWeOCUAAK6a0ZGWpAcffFAPPvjgZffbbDbNmzdP8+bNu+yaoKAgbdy4sTHGAwCg0Rj9njQAAE0ZkQYAwFBEGgAAQxFpAAAMRaQBADAUkQYAwFBEGgAAQxFpAAAMRaQBADAUkQYAwFBEGgAAQxFpAAAMRaQBADAUkQYAwFBEGgAAQxFpAAAMRaQBADAUkQYAwFBEGgAAQxFpAAAMRaQBADAUkQYAwFBEGgAAQxFpAAAMRaQBADAUkQYAwFBEGgAAQxFpAAAM5e3pAQAAuJK8vDxPj+Ciffv2ioyMdMuxiDQAwEjnyv4pyabRo0d7ehQXLVq01Bdf5Lkl1EQaAGCkyrPfS7LU8/GpuiGqs6fHkSQ5Cr5V5tq5Ki4uJtIAALQOjlRQZLSnx/AIPjgGAIChiDQAAIYi0gAAGIpIAwBgKCINAIChiDQAAIYi0gAAGIpIAwBgKCINAIChiDQAAIYi0gAAGIpIAwBgKCINAIChiDQAAIYi0gAAGIpIAwBgKCINAIChrqtIv/LKK7LZbJo0aZJz2/nz55WcnKx27dqpdevWGjlypAoLC10el5+fr2HDhqlly5YKDg7WlClTVFVV5ebpAQCom+sm0vv379drr72m7t27u2x/7rnn9Ne//lXvvvuu9uzZo++++04PP/ywc391dbWGDRumiooK7du3T2+88YbWr1+vWbNmufsUAACok+si0qdPn1ZiYqJ+//vfq23bts7tZWVlev3117V48WI98MAD6t27t9atW6d9+/bpk08+kSRt375dn3/+uf7nf/5HPXv21JAhQ/Tiiy8qNTVVFRUVtR6vvLxcDofD5QYAgLtdF5FOTk7WsGHDFB8f77I9KytLlZWVLts7d+6syMhIZWRkSJIyMjLUrVs3hYSEONckJCTI4XAoNze31uPNnz9fAQEBzltEREQjnBUAAFdmfKTfeustHTx4UPPnz79kn91ul4+PjwIDA122h4SEyG63O9f8ONAX9l/YV5vp06errKzMeTtx4kQDnAkAAHXj7ekBruTEiRN69tlnlZaWJj8/P7cd19fXV76+vm47HgAAtTH6mXRWVpaKiorUq1cveXt7y9vbW3v27NHy5cvl7e2tkJAQVVRUqLS01OVxhYWFCg0NlSSFhoZe8mnvC/cvrAEAwERGR3rgwIE6fPiwsrOznbc+ffooMTHR+e/mzZtr586dzsccOXJE+fn5iouLkyTFxcXp8OHDKioqcq5JS0uTv7+/unTp4vZzAgDgahn9cnebNm10++23u2xr1aqV2rVr59w+duxYTZ48WUFBQfL399fEiRMVFxenu+66S5I0aNAgdenSRWPGjNHChQtlt9s1Y8YMJScn85I2AMBoRkf6aixZskReXl4aOXKkysvLlZCQoN/97nfO/c2aNdOWLVs0YcIExcXFqVWrVkpKStK8efM8ODUAAD/tuov07t27Xe77+fkpNTVVqampl31Mhw4d9MEHHzTyZAAANCyj35MGAKApI9IAABiKSAMAYCgiDQCAoYg0AACGItIAABiKSAMAYCgiDQCAoYg0AACGItIAABiKSAMAYCgiDQCAoYg0AACGItIAABiKSAMAYCgiDQCAoYg0AACGItIAABiKSAMAYCgiDQCAoYg0AACGItIAABiKSAMAYCgiDQCAoYg0AACGItIAABiKSAMAYCgiDQCAoYg0AACGItIAABiKSAMAYCgiDQCAoYg0AACGItIAABiKSAMAYCgiDQCAoYg0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u9f1OrfkvtmbxF8c8/HxUe/evbVz507ntpqaGu3cuVNxcXEenAwAgMtrEs+kJWny5MlKSkpSnz591LdvXy1dulRnzpxxftobAADTNJlIP/roo/rHP/6hWbNmyW63q2fPntq6datCQkLcOoevr69mz559ycvppmNu92Ju92Ju97pe55bcP7vNsizLLUcCAAB10iTekwYA4HpEpAEAMBSRBgDAUEQaAABDEekGlJ6eroceekjh4eGy2WzavHnzTz5m9+7d6tWrl3x9fXXrrbdq/fr1jT7nxeo69+7du2Wz2S652e129wz8f+bPn68777xTbdq0UXBwsEaMGKEjR4785OPeffddde7cWX5+furWrZs++OADN0z7/9Vn7vXr119yvf38/Nw08Q9WrVql7t27O/+IQ1xcnP72t79d8TGevtZS3ec24VrX5pVXXpHNZtOkSZOuuM6Ea/5jVzO3Kdd8zpw5l8zRuXPnKz6msa83kW5AZ86cUY8ePZSamnpV648dO6Zhw4ZpwIABys7O1qRJk/SrX/1K27Zta+RJXdV17guOHDmigoIC582dX/kpSXv27FFycrI++eQTpaWlqbKyUoMGDdKZM2cu+5h9+/bpscce09ixY/XZZ59pxIgRGjFihHJycoyeW/rhLxz9+HofP37cTRP/4KabbtIrr7yirKwsHThwQA888ICGDx+u3NzcWtebcK3rM7fk+Wt9sf379+u1115T9+7dr7jOlGt+wdXOLZlzzbt27eoyx8cff3zZtW653g34PRb4EUnWpk2brrjmhRdesLp27eqy7dFHH7USEhIacbIru5q5P/zwQ0uSderUKbfMdLWKioosSdaePXsuu+aRRx6xhg0b5rItNjbWevrppxt7vMu6mrnXrVtnBQQEuG+oq9S2bVvrD3/4Q637TLzWF1xpbtOu9ffff2916tTJSktLs+6//37r2Wefvexak655XeY25ZrPnj3b6tGjx1Wvd8f15pm0B2VkZCg+Pt5lW0JCQq1fn2minj17KiwsTD/72c+0d+9eT4/j/ErRoKCgy64x8ZpfzdzSD1+N16FDB0VERPzkM8HGVl1drbfeektnzpy57J/WNfFaX83cklnXOjk5WcOGDbvkWtbGpGtel7klc6750aNHFR4erptvvlmJiYnKz8+/7Fp3XO8m8xfHTGS32y/5i2chISFyOBw6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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x='Job Title',data=df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "JYk8BNBAQDYl",
        "outputId": "d4332b79-0482-4403-d9f4-4402b2fe0bfd"
      },
      "execution_count": 113,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Job Title', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 113
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n"
      ],
      "metadata": {
        "id": "ZKJf5-ZFQcA4"
      },
      "execution_count": 114,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x='Job Title',data=df)\n",
        "plt.xticks(rotation=50)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 748
        },
        "id": "5_KuaAa6QiGy",
        "outputId": "3e5655f0-6551-4206-c983-8d6e02b2a13d"
      },
      "execution_count": 115,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "([0, 1, 2, 3, 4, 5, 6, 7],\n",
              " [Text(0, 0, 'data scientist'),\n",
              "  Text(1, 0, 'analyst'),\n",
              "  Text(2, 0, 'other'),\n",
              "  Text(3, 0, 'data engineer'),\n",
              "  Text(4, 0, 'manager'),\n",
              "  Text(5, 0, 'machine learning engineer'),\n",
              "  Text(6, 0, 'director'),\n",
              "  Text(7, 0, 'deep learning engineer')])"
            ]
          },
          "metadata": {},
          "execution_count": 115
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxenplot(x='Rating',data=df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "tybJRC1BRZR9",
        "outputId": "d6c5ddac-23b9-4dc3-9fd4-fe83a8f88b8d"
      },
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Rating'>"
            ]
          },
          "metadata": {},
          "execution_count": 127
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}